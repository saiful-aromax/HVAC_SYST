{
	"info": {
		"_postman_id": "cb0e910c-56c5-4d78-b98c-399749cf2be5",
		"name": "Cloud-to-Cloud Connection API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26775359",
		"_collection_link": "https://www.postman.com/s-neema/workspace/tuya-api/collection/20239299-cb0e910c-56c5-4d78-b98c-399749cf2be5?action=share&source=collection_link&creator=26775359"
	},
	"item": [
		{
			"name": "Get access_token with simple mode",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"    var str = clientId + timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Business verification calculation",
							"// function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + accessToken +timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(response.success){",
							"        tests[\"Body contains access_token\"] = responseBody.has(\"access_token\");",
							"        pm.environment.set(\"easy_access_token\",response.result.access_token);",
							"        pm.environment.set(\"easy_refresh_token\",response.result.refresh_token);",
							"    }",
							"    else{",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}"
					},
					{
						"key": "t",
						"value": "{{timestamp}}"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					},
					{
						"key": "nonce",
						"value": "",
						"type": "text"
					},
					{
						"key": "stringToSign",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/token?grant_type=1",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"token"
					],
					"query": [
						{
							"key": "grant_type",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Refresh token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(response.success){",
							"        tests[\"Body contains access_token\"] = responseBody.has(\"access_token\");",
							"        pm.environment.set(\"easy_access_token\",response.result.access_token);",
							"        pm.environment.set(\"easy_refresh_token\",response.result.refresh_token);",
							"    }",
							"    else{",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"    var str = clientId + timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Business verification calculation",
							"// function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + accessToken +timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					},
					{
						"key": "nonce",
						"value": "",
						"type": "text"
					},
					{
						"key": "stringToSign",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/token/{{easy_refresh_token}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"token",
						"{{easy_refresh_token}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get device information",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					},
					{
						"key": "nonce",
						"value": "",
						"type": "text"
					},
					{
						"key": "stringToSign",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/devices/{{device_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"devices",
						"{{device_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get device information in batches",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/devices?device_ids={{device_id}}&page_no=1&page_size=20",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"devices"
					],
					"query": [
						{
							"key": "device_ids",
							"value": "{{device_id}}"
						},
						{
							"key": "page_no",
							"value": "1"
						},
						{
							"key": "page_size",
							"value": "20"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get the function list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }else{",
							"        tests[\"Functions Not Null\"] = response.result.functions.length > 0;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/functions/dj",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"functions",
						"dj"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get device data points",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }else{",
							"        tests[\"result Not Null\"] = response.result.length > 0;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/devices/{{device_id}}/status",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"devices",
						"{{device_id}}",
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get device status in batches",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/devices/status?device_ids={{device_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"devices",
						"status"
					],
					"query": [
						{
							"key": "device_ids",
							"value": "{{device_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Query instruction sets supported by the device",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }else{",
							"        tests[\"result Not Null\"] = response.result.functions.length > 0;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/devices/{{device_id}}/functions",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"devices",
						"{{device_id}}",
						"functions"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send device commands",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"commands\":[\n\t\t{\n\t\t\t\"code\": \"switch\",\n\t\t\t\"value\":true\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "{{url}}/v1.0/devices/{{device_id}}/commands",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"devices",
						"{{device_id}}",
						"commands"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cloud user registration",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }else{",
							"        pm.environment.set(\"uid\",response.result.uid);",
							"        tests[\"Uid Not Null\"] = response.result.uid !== \"\";",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"country_code\":\"86\",\n\t\"username\":\"test123\",\n\t\"password\":\"12345654321\",\n\t\"nick_name\":\"Users of test 3\",\n\t\"username_type\":\"3\"\n}"
				},
				"url": {
					"raw": "{{url}}/v1.0/apps/{{schema}}/user",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"apps",
						"{{schema}}",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get the user list",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }else{",
							"        tests[\"List Not Null\"] = response.result.list.length > 0;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/apps/{{schema}}/users?page_no=1&page_size=10",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"apps",
						"{{schema}}",
						"users"
					],
					"query": [
						{
							"key": "page_no",
							"value": "1"
						},
						{
							"key": "page_size",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get the device list by user ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }else{",
							"        tests[\"result Not Null\"] = response.result !== [];",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/users/{{uid}}/devices",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"users",
						"{{uid}}",
						"devices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate the token of device pairing",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }else{",
							"        tests[\"Token Not Null\"] = response.result.token !== \"\";",
							"        pm.environment.set(\"pair_token\",response.result.token);",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"uid\":\"{{uid}}\",\n\t\"timeZoneId\":\"Asia/Shanghai\"\n}"
				},
				"url": {
					"raw": "{{url}}/v1.0/device/paring/token",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"device",
						"paring",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get the device list by token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/devices/tokens/{{pair_token}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"devices",
						"tokens",
						"{{pair_token}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Remove the device",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"(function () {",
							"    var timestamp = getTime();",
							"    pm.environment.set(\"timestamp\",timestamp);",
							"",
							"    const clientId = pm.environment.get(\"client_id\");",
							"    const secret = pm.environment.get(\"secret\");",
							"",
							"    var accessToken = \"\";",
							"    if(pm.environment.has(\"easy_access_token\")){",
							"        accessToken = pm.environment.get(\"easy_access_token\")",
							"    }",
							"",
							"    const httpMethod = pm.request.method.toUpperCase();",
							"    const query = pm.request.url.query;",
							"    const mode = pm.request.body.mode;",
							"    const headers = pm.request.headers;",
							"    ",
							"    // sha256",
							"    var signMap = stringToSign(query, mode, httpMethod, secret)",
							"    var urlStr = signMap[\"url\"]",
							"    var signStr = signMap[\"signUrl\"]",
							"    pm.request.url = pm.request.url.host + urlStr",
							"    var nonce = \"\"",
							"    if (headers.has(\"nonce\")) {",
							"        var jsonHeaders = JSON.parse(JSON.stringify(headers))",
							"        jsonHeaders.forEach(function(item){",
							"            if (item.key == \"nonce\" && !item.disabled) {",
							"                nonce = headers.get(\"nonce\")",
							"            }",
							"        })",
							"    }",
							"    var sign = calcSign(clientId, accessToken, timestamp, nonce, signStr, secret);",
							"    pm.environment.set('easy_sign', sign);",
							"})();",
							"",
							"function getTime(){",
							"    var timestamp = new Date().getTime();",
							"    return timestamp;",
							"}",
							"",
							"// Token verification calculation",
							"// function calcSign(clientId,timestamp,nonce,signStr,secret){",
							"//     var str = clientId + timestamp + nonce + signStr;",
							"//     var hash = CryptoJS.HmacSHA256(str, secret);",
							"//     var hashInBase64 = hash.toString();",
							"//     var signUp = hashInBase64.toUpperCase();",
							"//     return signUp;",
							"// }",
							"",
							"// Business verification calculation",
							"function calcSign(clientId,accessToken,timestamp,nonce,signStr,secret){",
							"    var str = clientId + accessToken +timestamp + nonce + signStr;",
							"    var hash = CryptoJS.HmacSHA256(str, secret);",
							"    var hashInBase64 = hash.toString();",
							"    var signUp = hashInBase64.toUpperCase();",
							"    return signUp;",
							"}",
							"",
							"// Generate signature string",
							"function stringToSign(query, mode, method, secret){",
							"    var sha256 = \"\";",
							"    var url = \"\";",
							"    var headersStr = \"\"",
							"    const headers = pm.request.headers;",
							"    var map = {}",
							"    var arr = []",
							"    var bodyStr = \"\"",
							"    if(query){",
							"        toJsonObj(query, arr, map)",
							"    }",
							"    if (pm.request.body && mode) {",
							"        if (mode != \"formdata\" && mode != \"urlencoded\"){",
							"            bodyStr = replacePostmanParams(pm.request.body.toString())",
							"        } else if (mode == \"formdata\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"formdata\"], arr, map)",
							"        } else if (mode == \"urlencoded\") {",
							"            // Traversing form key value pairs",
							"            toJsonObj(pm.request.body[\"urlencoded\"], arr, map)",
							"        }",
							"    } ",
							"    sha256 = CryptoJS.SHA256(bodyStr)",
							"    arr = arr.sort()",
							"    arr.forEach(function(item){",
							"            url += item + \"=\" + map[item] + \"&\"",
							"    })",
							"    if (url.length > 0 ) {",
							"        url = url.substring(0, url.length-1)",
							"        url = \"/\" + pm.request.url.path.join(\"/\") + \"?\" + url",
							"    } else {",
							"        url = \"/\" + pm.request.url.path.join(\"/\") ",
							"    }",
							"    ",
							"    if (headers.has(\"Signature-Headers\") && headers.get(\"Signature-Headers\")) {",
							"        var signHeaderStr = headers.get(\"Signature-Headers\")",
							"        const signHeaderKeys = signHeaderStr.split(\":\")",
							"        signHeaderKeys.forEach(function(item){",
							"            var val = \"\"",
							"            if (pm.request.headers.get(item)) {",
							"                val = pm.request.headers.get(item)",
							"            }",
							"            headersStr += item + \":\" + val + \"\\n\"",
							"        })",
							"    }",
							"    var map = {}",
							"    ",
							"    url = replacePostmanParams(url)",
							"",
							"    map[\"signUrl\"] = method + \"\\n\" + sha256 + \"\\n\" + headersStr + \"\\n\" + url",
							"    map[\"url\"] = url",
							"    return map",
							"}",
							"",
							"function replacePostmanParams(str){",
							"    while(str.indexOf(\"{{\")!=-1&&str.indexOf(\"}}\")!=-1){",
							"        const key = str.substring(str.indexOf(\"{{\")+2,str.indexOf(\"}}\"))",
							"        var value = pm.environment.get(key)",
							"        if(!value) value=\"\"",
							"        str = str.replace(\"{{\"+key+\"}}\", value)",
							"    }",
							"    return str",
							"}",
							"",
							"",
							"function toJsonObj(params, arr, map){",
							"    var jsonBodyStr = JSON.stringify(params)",
							"    var jsonBody = JSON.parse(jsonBodyStr)",
							"    ",
							"    jsonBody.forEach(function(item){",
							"        arr.push(item.key)",
							"        map[item.key] = item.value",
							"    })",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = JSON.parse(responseBody);",
							"",
							"if(response !== null){",
							"    tests[\"Is Success\"] = response.success === true;",
							"    if(!response.success && response.code !=2011 && response.code !=1106){",
							"        var msg = \"code: \" + response.code + \" msg: \" + response.msg;",
							"        tests[msg] = false;",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "client_id",
						"value": "{{client_id}}",
						"type": "text"
					},
					{
						"key": "access_token",
						"value": "{{easy_access_token}}",
						"type": "text"
					},
					{
						"key": "sign",
						"value": "{{easy_sign}}",
						"type": "text"
					},
					{
						"key": "t",
						"value": "{{timestamp}}",
						"type": "text"
					},
					{
						"key": "sign_method",
						"value": "HMAC-SHA256",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/v1.0/devices/{{device_id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"v1.0",
						"devices",
						"{{device_id}}"
					]
				}
			},
			"response": []
		}
	]
}